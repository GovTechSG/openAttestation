// types generated by quicktype during postinstall phase
import { OpenAttestationDocument as OpenAttestationDocumentV3 } from "../__generated__/schema.3.0";
import { OpenAttestationHexString, ProofPurpose, SchemaId, SignatureAlgorithm } from "../shared/@types/document";
import { Array as RunTypesArray, Record as RunTypesRecord, Static, String } from "runtypes";

export interface Salt {
  value: string;
  path: string;
}
export const ObfuscationMetadata = RunTypesRecord({
  obfuscated: RunTypesArray(OpenAttestationHexString)
});
export type ObfuscationMetadata = Static<typeof ObfuscationMetadata>;

export const VerifiableCredentialProofBase = RunTypesRecord({
  type: SignatureAlgorithm,
  targetHash: OpenAttestationHexString,
  merkleRoot: OpenAttestationHexString,
  proofs: RunTypesArray(OpenAttestationHexString),
  salts: String,
  privacy: ObfuscationMetadata,
  proofPurpose: ProofPurpose
});
export type VerifiableCredentialProofBase = Static<typeof VerifiableCredentialProofBase>;

export const VerifiableCredentialProofSigned = VerifiableCredentialProofBase.And(
  RunTypesRecord({
    key: String,
    signature: String
  })
);
export type VerifiableCredentialProofSigned = Static<typeof VerifiableCredentialProofSigned>;

// TODO rename to something else that is not proof to allow for did-signed documents
// Also it makes sense to use `proof` to denote a document that has been issued
export type WrappedDocument<T extends OpenAttestationDocumentV3 = OpenAttestationDocumentV3> = T & {
  version: SchemaId.v3;
  schema?: string;
  proof: VerifiableCredentialProofBase;
};

export type SignedWrappedDocument<T extends OpenAttestationDocumentV3 = OpenAttestationDocumentV3> = WrappedDocument<
  T
> & {
  proof: VerifiableCredentialProofSigned;
};

export * from "../__generated__/schema.3.0";
