// types generated by quicktype during postinstall phase
import { OpenAttestationDocument as OpenAttestationDocumentV2 } from "../../__generated__/schema.2.0";
import { OpenAttestationDocument as OpenAttestationDocumentV3 } from "../../__generated__/schema.3.0";
import {
  WrappedDocument as WrappedDocumentV2,
  SignedWrappedDocument as SignedWrappedDocumentV2
} from "../../2.0/types";
import {
  WrappedDocument as WrappedDocumentV3,
  SignedWrappedDocument as SignedWrappedDocumentV3
} from "../../3.0/types";
import { Literal, Static } from "runtypes";

export type OpenAttestationDocument = OpenAttestationDocumentV2 | OpenAttestationDocumentV3;
export type WrappedDocument<T extends OpenAttestationDocument> = T extends OpenAttestationDocumentV2
  ? WrappedDocumentV2<T>
  : T extends OpenAttestationDocumentV3
  ? WrappedDocumentV3<T>
  : unknown;
export type SignedWrappedDocument<T extends OpenAttestationDocument> = T extends OpenAttestationDocumentV2
  ? SignedWrappedDocumentV2<T>
  : T extends OpenAttestationDocumentV3
  ? SignedWrappedDocumentV3<T>
  : unknown;

export enum SignatureAlgorithm {
  OpenAttestationMerkleProofSignature2018 = "OpenAttestationMerkleProofSignature2018"
}

export enum SchemaId {
  v2 = "https://schema.openattestation.com/2.0/schema.json",
  v3 = "https://schema.openattestation.com/3.0/schema.json"
}

export interface ObfuscationMetadata {
  obfuscatedData?: string[];
}

export const ProofType = Literal("OpenAttestationSignature2018");
export type ProofType = Static<typeof ProofType>;
export const ProofPurpose = Literal("assertionMethod");
export type ProofPurpose = Static<typeof ProofPurpose>;
